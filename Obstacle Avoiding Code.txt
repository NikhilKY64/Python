#include <NewPing.h>
#include <Servo.h>
#include <AFMotor.h>

// ---------------- Pin Definitions ----------------
#define TRIGGER_PIN A1
#define ECHO_PIN    A0
#define MAX_DISTANCE 200

#define SERVO_PIN 10

// Motors (Adafruit Shield)
AF_DCMotor Motor1(1, MOTOR12_1KHZ);
AF_DCMotor Motor2(2, MOTOR12_1KHZ);
AF_DCMotor Motor3(3, MOTOR34_1KHZ);
AF_DCMotor Motor4(4, MOTOR34_1KHZ);

// ---------------- Adjustable Settings ----------------
#define FWD_SPEED 150
#define TURN_SPEED 150
#define OBSTACLE_DIST 20   // cm distance to stop
#define SERVO_LEFT 170
#define SERVO_RIGHT 10
#define SERVO_CENTER 85
#define PAUSE_TIME 500     // milliseconds pause at left/right

// ---------------- Globals ----------------
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
Servo myservo;

void setup() {
  Serial.begin(9600);
  myservo.attach(SERVO_PIN);
  myservo.write(SERVO_CENTER);
}

void loop() {
  // Check front distance
  int frontDist = sonar.ping_cm();
  if (frontDist == 0) frontDist = MAX_DISTANCE;

  if (frontDist > OBSTACLE_DIST) {
    // Path clear → move forward
    moveForward(FWD_SPEED);
  } else {
    // Obstacle detected → stop
    stopMotors();
    delay(100);

    // Quick scan left
    myservo.write(SERVO_LEFT);
    delay(PAUSE_TIME);
    int leftDist = sonar.ping_cm();
    if (leftDist == 0) leftDist = MAX_DISTANCE;

    // Quick scan right
    myservo.write(SERVO_RIGHT);
    delay(PAUSE_TIME);
    int rightDist = sonar.ping_cm();
    if (rightDist == 0) rightDist = MAX_DISTANCE;

    // Quickly return to center
    myservo.write(SERVO_CENTER);
    delay(100);

    // Decide turn direction
    if (leftDist > rightDist) {
      turnLeft(TURN_SPEED);
      delay(800);
    } else {
      turnRight(TURN_SPEED);
      delay(800);
    }
    stopMotors(); // ensure motors stop after turn
  }

  delay(20); // small loop delay
}

// ---------------- Motor Helpers ----------------
void moveForward(int speed) {
  Motor1.setSpeed(speed); Motor1.run(FORWARD);
  Motor2.setSpeed(speed); Motor2.run(FORWARD);
  Motor3.setSpeed(speed); Motor3.run(FORWARD);
  Motor4.setSpeed(speed); Motor4.run(FORWARD);
}

void moveBackward(int speed){
  Motor1.setSpeed(speed); Motor1.run(BACKWARD);
  Motor2.setSpeed(speed); Motor2.run(BACKWARD);
  Motor3.setSpeed(speed); Motor3.run(BACKWARD);
  Motor4.setSpeed(speed); Motor4.run(BACKWARD);
}

void turnLeft(int speed){
  Motor1.setSpeed(speed); Motor1.run(FORWARD);
  Motor2.setSpeed(speed); Motor2.run(FORWARD);
  Motor3.setSpeed(speed); Motor3.run(BACKWARD);
  Motor4.setSpeed(speed); Motor4.run(BACKWARD);
}

void turnRight(int speed){
  Motor1.setSpeed(speed); Motor1.run(BACKWARD);
  Motor2.setSpeed(speed); Motor2.run(BACKWARD);
  Motor3.setSpeed(speed); Motor3.run(FORWARD);
  Motor4.setSpeed(speed); Motor4.run(FORWARD);
}

void stopMotors(){
  Motor1.run(RELEASE);
  Motor2.run(RELEASE);
  Motor3.run(RELEASE);
  Motor4.run(RELEASE);
}